<?xml version="1.0" encoding="UTF-8"?>
<project name="bluej" default="ready-to-run">

    <!-- ************************************************************ -->
    <!-- set global properties for this build (and subproject builds} -->
    <!-- ************************************************************ -->
    <!-- it should not be necessary to edit any properties to build -->

    <!-- user specific properties that are edited to match local build environment-->
    <property file="build.properties"/>
    <property name="bluej_home" value="${basedir}" />

    <!-- 
     This is the only place you need to change the version number.
     After changing the version number the target "update-version-number" should be run -->
    <property name="bluej.version.major" value="3" />
    <property name="bluej.version.minor" value="1" />
    <property name="bluej.version.release" value="6" />
    <property name="bluej.version.suffix" value="" />
	<!-- suffix with no spaces, eg "pre2" -->
	<property name="bluej.version.nonspace.suffix" value="" />
    
	<property name="bluej.version" value="${bluej.version.major}.${bluej.version.minor}.${bluej.version.release}${bluej.version.suffix}" />
    <property name="bluej.version.nodots" value="${bluej.version.major}${bluej.version.minor}${bluej.version.release}${bluej.version.suffix}" />
	<property name="bluej.version.debian" value="${bluej.version.major}.${bluej.version.minor}.${bluej.version.release}${bluej.version.nonspace.suffix}" />

    <!-- user specific properties that are edited to match local build environment-->
    <property file="build.properties"/>

    <!-- Set up common directories -->
    <property name="core.doc" value="doc/all"/>
    <property name="extension.doc" value="doc/extensions"/>

    <property name="core.src" value="src"/>
    <property name="core.build" value="classes"/>
    <property name="boot.src" value="boot/src"/>
    <property name="boot.build" value="boot/classes"/>
	<property name="threadchecker.src" value="threadchecker/src"/>
	<property name="threadchecker.build" value="threadchecker/classes"/>
	<property name="threadchecker.pluginsrc" value="threadchecker/pluginsrc"/>
	<property name="threadchecker.pluginbuild" value="threadchecker/pluginclasses"/>
    <property name="test.src" value="test/src"/>
    <property name="test.build" value="test/classes"/>
    <property name="test.report" value="test/report"/>

    <property name="extensions.lib"  location="${bluej_home}/lib/extensions"/>

    <property name="boot.jar" value="${bluej_home}/lib/bluej.jar"/>
    <property name="core.jar" value="${bluej_home}/lib/bluejcore.jar"/>
    <property name="editor.jar" value="${bluej_home}/lib/bluejeditor.jar"/>
    <property name="extension.jar" value="${bluej_home}/lib/bluejext.jar"/>

    <!-- Set up classpath (does not include jar files built by us) -->
    <path id="bluej.class.path">
        <pathelement location="${bluej_home}/lib/AppleJavaExtensions.jar"/>
        <pathelement location="${bluej_home}/lib/junit-4.11.jar"/>
        <pathelement location="${bluej_home}/lib/hamcrest-core-1.3.jar"/>
        <pathelement location="${bluej_home}/lib/org-netbeans-lib-cvsclient.jar"/>
        <pathelement location="${bluej_home}/lib/svnkit-javahl.jar"/>
        <pathelement location="${bluej_home}/lib/trilead.jar"/>
        <pathelement location="${bluej_home}/lib/antlr-runtime-3.4.jar"/>
        <pathelement location="${bluej_home}/lib/sequence-library-1.0.3.jar"/>
        <pathelement location="${bluej_home}/lib/sqljet-1.1.10.jar"/>
        <pathelement location="${bluej_home}/lib/httpclient-4.1.1.jar"/>
        <pathelement location="${bluej_home}/lib/httpcore-4.1.jar"/>
        <pathelement location="${bluej_home}/lib/httpmime-4.1.1.jar"/>
        <pathelement location="${bluej_home}/lib/commons-logging-api-1.1.2.jar"/>
        <pathelement location="${bluej_home}/lib/diffutils-1.2.1.jar"/>
        <pathelement location="${bluej_home}/lib/xom-1.2.9.jar"/>
    	<pathelement location="${bluej_home}/lib/guava-17.0.jar"/>
    	<pathelement location="${bluej_home}/lib/javassist-3.18.0.jar"/>
    	<pathelement location="${bluej_home}/lib/commons-vfs2-2.0.jar"/>
        <pathelement location="${bluej_home}/lib/jsch-0.1.53.jar"/>
        <pathelement location="${bluej_home}/lib/org.eclipse.jgit-4.1.0.jar"/>
    	<pathelement location="${build_java_home}/jre/lib/jfxrt.jar"/>
    </path>

    <!-- taskdef name="jarbundler"
        classname="com.loomcom.ant.tasks.jarbundler.JarBundler" / -->

    <!--
      -  Compile the boot strap loader
     -->
    <target name="compile-boot">
        <mkdir dir="${boot.build}"/>
        <!-- Compile the java code from ${boot.src} into ${boot.build} -->
        <!-- Boot should not need any other jars or classes other than standard JDK -->
        <javac
                executable="${build_java_home}/${java_command_dir_name}/javac"
                fork="yes"
                srcdir="${boot.src}"
                destdir="${boot.build}"
                source="1.8"
                target="1.8"
                deprecation="yes"
                includeantruntime="false"
                encoding="utf-8"
        >
            <classpath>
                <pathelement location="${bluej_home}/lib/AppleJavaExtensions.jar"/>
            </classpath>
        </javac>

    </target>

	<target name="compile-threadchecker">
	        <mkdir dir="${threadchecker.build}"/>
            <mkdir dir="${threadchecker.pluginbuild}"/>
            <javac
                    executable="${build_java_home}/${java_command_dir_name}/javac"
                    fork="yes"
                    srcdir="${threadchecker.src}"
                    destdir="${threadchecker.build}"
                    source="1.8"
                    target="1.8"
                    deprecation="yes"
                    includeantruntime="false"
                    encoding="utf-8"
        	        debug="true"
            />
	        <javac
	                executable="${build_java_home}/${java_command_dir_name}/javac"
	                fork="yes"
	                srcdir="${threadchecker.pluginsrc}"
	                destdir="${threadchecker.pluginbuild}"
	                source="1.8"
	                target="1.8"
	                deprecation="yes"
	                includeantruntime="false"
	                encoding="utf-8"
	        	    debug="true"
	        >
	        	<classpath>
	        		<pathelement location="${build_java_home}/lib/tools.jar"/>
	        		<pathelement location="${threadchecker.build}"/>
	            </classpath>
	        </javac>
            <copy todir="${threadchecker.build}/META-INF">
		       <fileset dir="${threadchecker.src}/META-INF"/>
            </copy>
	    </target>

	
    <!--
      -  Compile the core classes (includes extension and editor classes)
     -->
    <target name="compile-core" depends="compile-threadchecker">
        <mkdir dir="${core.build}"/>
    	<!-- Compile the java code from ${core.src} into ${core.build} -->
    	<echo message="Excluding: ${srcexcludes}" />
        <javac
                executable="${build_java_home}/${java_command_dir_name}/javac"
                fork="yes"
                source="1.8"
                target="1.8"
                srcdir="${core.src}"
                destdir="${core.build}"
                debug="on"
                deprecation="yes"
                includeantruntime="false"
                encoding="utf-8"
            	excludes="bluej/editor/moe/Moe.java,
        				bluej/editor/moe/**,
        				${srcexcludes}"
                >

            <classpath>
                <path refid="bluej.class.path"/>
            	<pathelement location="${threadchecker.build}"/>
            	<pathelement location="${threadchecker.pluginbuild}"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        	<compilerarg value="-Xmaxerrs"/><compilerarg value="1000"/>
        	<compilerarg value="-Xplugin:threadchecker.TCPlugin org.reflections"/>
        	<!-- <compilerarg value="-J-XX:+UnlockCommercialFeatures"/>
        	<compilerarg value="-J-XX:+FlightRecorder"/>
        	<compilerarg value="-J-XX:StartFlightRecording=filename=nccb-without.jfr,duration=120s,settings=/Users/neil/workspace/BlueJ/nccb.jfc"/> -->
        </javac>
    </target>

    <target name="compile-test" depends="compile-boot, compile-core">
        <mkdir dir="${test.build}"/>
        <mkdir dir="${test.report}"/>
        <!-- Compile the java code from ${test.src} into ${test.build} -->
        <javac
                executable="${build_java_home}/${java_command_dir_name}/javac"
                fork="yes"
                srcdir="${test.src}"
                source="1.8"
                target="1.8"
                destdir="${test.build}"
                deprecation="yes"
                >
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.build}"/>
                <pathelement location="${core.build}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="jar-boot" depends="compile-boot">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${boot.jar}"/>
        <!-- this is the Boot, the resulting jar is bluej.jar for historic reasons -->
        <jar compress="yes" jarfile="${boot.jar}">
            <fileset dir="${boot.build}">
                <include name="bluej/Boot*.class"/>
                <include name="bluej/Splash*.class"/>
                <include name="bluej/BlueJLabel.class"/>
                <include name="bluej/GreenfootLabel.class"/>
            </fileset>
            <fileset dir="${boot.src}">
                <include name="bluej/splash.jpg"/>
                <include name="bluej/greenfoot-3-splash.png"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="bluej.Boot"/>
            </manifest>
        </jar>
    </target>

    <target name="jar-core" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${core.jar}"/>
        <jar compress="yes" jarfile="${core.jar}">
            <fileset dir="${core.build}">
                <exclude name="bluej/extensions/**" />
                <exclude name="bluej/editor/**" />
                <exclude name="org/**" />
            </fileset>
        	<fileset dir="lib">
        	    <include name="stylesheets/**"/>
        	</fileset>
        </jar>
    </target>

    <target name="jar-editor" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${editor.jar}"/>
        <jar compress="yes" jarfile="${editor.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/editor/**" />
                <include name="org/**" />
                <exclude name="bluej/editor/*.txt" />
                <exclude name="bluej/editor/*.xml" />
            </fileset>
        </jar>
    </target>

    <target name="jar-extension" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${extension.jar}"/>
        <jar compress="yes" jarfile="${extension.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/extensions/**" />
            </fileset>
        </jar>
    </target>

    <target name="ready-to-run" depends="jar-core, jar-editor, jar-extension">
    </target>
	
	<target name="ready-to-run-greenfoot" description="prepare to run Greenfoot">
		<!-- We can exclude version control from the build -->
		<property name="srcexcludes" value="bluej/groupwork/cvsnb/**,bluej/groupwork/svn/**,bluej/groupwork/git/**" />
		<antcall target="ready-to-run" />
	</target>

    <target name="run">
        <!-- delete the greenfoot jar (if it exists) since it screws up BlueJ -->
        <delete quiet="true" file="${extensions.lib}/greenfoot.jar"/>
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${run_java_home}/${java_command_dir_name}/java">
            <!-- Include the following line to enable attachment of the Netbeans debugger
            <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8888,server=y,suspend=n"/>
            -->
            <classpath>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
            </classpath>
        </java>
    </target>

    <target name="run-profiler">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
            </classpath>
        </nbprofiledirect>

        <!-- delete the greenfoot jar (if it exists) since it screws up BlueJ -->
        <delete quiet="true" file="${extensions.lib}/greenfoot.jar"/>
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${run_java_home}/${java_command_dir_name}/java">
            <classpath>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
            </classpath>
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
        </java>
    </target>

    <target name="editor-dist">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="dist"/>
    </target>

    <target name="dist" depends="ready-to-run,check-licences">
        <echo message="Do you have the latest copy of the submitter extension in your lib/extensions directory??"/>
        <ant dir="package" target="dist"/>
        <!-- ant dir="package" target="windows-dist"/-->
    </target>

    <target name="dist-greenfoot" depends="ready-to-run,check-licences">
        <ant dir="package" antfile="greenfoot-build.xml" target="dist"/>
    </target>

    <target name="windows-dist" depends="dist">
        <ant dir="package" target="windows-dist"/>
    </target>
	
	<target name="windows-msi-dist" depends="dist">
	    <ant dir="package" target="windows-msi-dist"/>
	</target>
	
	<target name="windows-msi-bundled-dist" depends="dist">
	    <ant dir="package" target="windows-msi-bundled-dist"/>
	</target>

    <target name="mac-dist" description="build Mac distributable bundles" depends="dist">
        <ant dir="package" target="mac-dist"/>
    </target>
	
	<!-- build *.deb package -->
	<target name="debian-dist" description="build Debian package" depends="dist">
        <ant dir="package" target="debian-dist"/>
	</target>

    <target name="test" depends="compile-core, compile-test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${core.jar}"/>
                <pathelement location="${extension.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
            	<pathelement location="${editor.jar}"/>
                <pathelement location="${test.build}"/>
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="yes" todir="${test.report}">
                <fileset dir="${test.src}">
                    <include name="**/*Test*.java"/>
                	<exclude name="bluej/debugger/gentype/TestReflective.java"/>
                    <exclude name="**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="doc-core">
        <!-- doc the java code from ${core.src} into ${core.doc} -->
        <mkdir dir="${core.doc}"/>
        <javadoc destdir="${core.doc}"
            packagenames="bluej.*, org.syntax.jedit.*"
            excludepackagenames=
               "bluej.guibuilder.*,
                bluej.groupwork.*,
                bluej.browser.*"
            sourcepath="${core.src}"
            Windowtitle="BlueJ API"
            Doctitle="BlueJ API"
            bottom="&lt;a href=//www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="doc-extension">
        <mkdir dir="${extension.doc}"/>
        <javadoc destdir="${extension.doc}"
            packagenames="bluej.extensions.event"
            sourcepath="${core.src}"

            Windowtitle="BlueJ Extensions API"
            Doctitle="BlueJ Extensions API"
            bottom="&lt;a href=http://www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">

            <fileset dir="src" defaultexcludes="yes">
                <include name="bluej/extensions/*.java" />
                <exclude name="bluej/extensions/ExtensionBridge.java"/>
                <include name="bluej/extensions/editor/*.java"/>
                <exclude name="bluej/extensions/editor/EditorBridge.java"/>
            </fileset>
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="update-version-number" description="updates the version number in all files where it appears" >
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_MAJOR = .*"/>
            <substitution expression="BLUEJ_VERSION_MAJOR = ${bluej.version.major};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_MINOR = .*"/>
            <substitution expression="BLUEJ_VERSION_MINOR = ${bluej.version.minor};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_RELEASE = .*"/>
            <substitution expression="BLUEJ_VERSION_RELEASE = ${bluej.version.release};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_SUFFIX = .*"/>
            <substitution expression="BLUEJ_VERSION_SUFFIX = &quot;${bluej.version.suffix}&quot;;"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
    	
        <!-- update BlueJ README.txt version number -->
        <replaceregexp byline="true">
            <regexp pattern="BlueJ version .*\b (\s+--.*)" />
            <substitution expression="BlueJ version ${bluej.version} \1"/>
            <fileset dir="doc" includes="README.TXT" />
        </replaceregexp>
    </target>
    
    <target name="clean-boot">
        <delete quiet="true" dir="${boot.build}"/>
        <delete quiet="true" file="${boot.jar}"/>
    </target>

    <target name="clean-greenfoot" description="clean up greenfoot related stuff" >
        <!-- Installer image windows: greenfoot-install.bmp -->
        <delete file="package/greenfoot-install.bmp" />
        <!-- Installer image jar: greenfoot-install.png -->
        <delete file="package/greenfoot-install.png" />
        <delete file="boot/src/bluej/greenfoot-3-splash.png" />
        <delete dir="lib/greenfoot" />
        <!-- Commons libraries -->
     	<delete >
            <fileset dir="lib">
                <include name="commons-codec-*.jar"/>
            	<include name="commons-codec-httpclient-*.jar"/>
                <exclude name="commons-logging-api-1.1.2.jar"/>
            </fileset>
        </delete>
        <delete dir="package/scenarios" />
        <delete>
            <fileset file="lib/extensions/greenfoot.jar"/>
        </delete>
        
        <delete includeEmptyDirs="true">
            <fileset dir="lib">
                <include name="*/greenfoot/" />
            </fileset>
        </delete>
    </target>

    <target name="clean-core">
        <delete quiet="true" dir="${core.build}" />
        <delete quiet="true" file="${core.jar}" />
        <delete quiet="true" file="${editor.jar}" />
        <delete quiet="true" file="${extension.jar}" />

    </target>

    <target name="clean" depends="clean-boot, clean-core, clean-greenfoot">
        <ant dir="package" target="clean"/>
    	<delete quiet="true" dir="${threadchecker.build}" />
    	<delete quiet="true" dir="${threadchecker.pluginbuild}" />
    </target>

    <target name="editor-clean">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="clean"/>
    </target>
    
    <target name="pi4j-compile">
        <exec dir="${bluej_home}/pi4j" executable="mvn">
            <arg line="package" />
        </exec>
    </target>
    
    <target name="clean-pi4j">
        <exec dir="${bluej_home}/pi4j" executable="mvn">
            <arg line="clean" />
        </exec>
    </target>
    
    <target name="pi4j-move-to-lib" depends="pi4j-compile">
        <move file="${bluej_home}/pi4j/pi4j-distribution/target/distro-contents/lib/pi4j-device.jar" todir="${bluej_home}/lib/userlib" />
        <move file="${bluej_home}/pi4j/pi4j-distribution/target/distro-contents/lib/pi4j-gpio-extension.jar" todir="${bluej_home}/lib/userlib" />
        <move file="${bluej_home}/pi4j/pi4j-distribution/target/distro-contents/lib/pi4j-service.jar" todir="${bluej_home}/lib/userlib" />
        <move file="${bluej_home}/pi4j/pi4j-distribution/target/distro-contents/lib/pi4j-core.jar" todir="${bluej_home}/lib/userlib" />
    </target>
    
    <target name="check-licences" description="Check that no un-vetted additional libraries have been added to the source tree">
    	<!-- The purpose of this target is to help ensure that libraries do not get added to the source
    	     tree without properly checking and complying with their license(s). -->
        <pathconvert property="missing.licenses" pathsep="${line.separator}">
            <fileset dir="lib">
                <!-- Look for JARs in lib, except the ones we generate: -->
                <!-- (Ideally we'd separate BlueJ and Greenfoot JARs, but never mind: -->
                <include name="*.jar"/>
                <exclude name="bluej*.jar"/>
                <exclude name="bjdoclet.jar"/>
            	
            	<!-- Now we exclude all files for which the license is correctly noted in the
            	     THIRDPARTYLICENSE.txt file and for which a copy of the license is in the
            	     doc/thirdpartylicenses directory, and for which it has been verified that
            	     the licensing requirements are otherwise met. -->
            	
            	<!-- DO NOT add to this list without first ensuring that the above requirements
            	     are met! -->
            	     
            	<exclude name="antlr-runtime-3.4.jar"/>
            	<exclude name="AppleJavaExtensions.jar"/>
            	<exclude name="commons-logging-api-1.1.2.jar"/>
            	<exclude name="commons-vfs2-2.0.jar"/>
            	<exclude name="diffutils-1.2.1.jar"/>
            	<exclude name="guava-17.0.jar"/>
            	<exclude name="hamcrest-core-1.3.jar"/>
            	<exclude name="httpclient-4.1.1.jar"/>
            	<exclude name="httpcore-4.1.jar"/>
            	<exclude name="httpmime-4.1.1.jar"/>
            	<exclude name="javassist-3.18.0.jar"/>
            	<exclude name="jna-4.2.0.jar"/>
            	<exclude name="jna-platform-4.2.0.jar"/>
            	<exclude name="junit-4.11.jar"/>
            	<exclude name="org-netbeans-lib-cvsclient.jar"/>
            	<exclude name="sequence-library-1.0.3.jar"/>
            	<exclude name="svnkit.jar"/>
            	<exclude name="svnkit-javahl.jar"/>
            	<exclude name="sqljet-1.1.10.jar"/>
            	<exclude name="trilead.jar"/>
            	<exclude name="xom-1.2.9.jar"/>
                <exclude name="jsch-0.1.53.jar"/>
                <exclude name="org.eclipse.jgit-4.1.0.jar"/>
                <exclude name="slf4j-api-1.7.2.jar"/>
                <exclude name="slf4j-jdk14-1.7.2.jar"/>
                

            	<!-- Greenfoot libraries: -->
            	<exclude name="commons-codec-1.3.jar"/>
            	<exclude name="commons-httpclient-3.1.jar"/>
            	<exclude name="jl1.0.1.jar"/>
            	<exclude name="opencsv-2.3.jar"/>
            	
            </fileset>
        </pathconvert>
        
        <!-- Then check no licenses are missing: -->
        <fail message="Missing third party licenses: ${missing.licenses}">
            <condition>
                <not>
                    <equals arg1="${missing.licenses}" arg2=""/>
                </not>
            </condition>
        </fail>
    </target>
</project>
