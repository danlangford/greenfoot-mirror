<?xml version="1.0" encoding="UTF-8"?>
<project name="bluej" default="ready-to-run">

    <!-- ************************************************************ -->
    <!-- set global properties for this build (and subproject builds} -->
    <!-- ********************************************** -->
    <!-- it should not be necessary to edit any properties to build -->

    <!-- user specific properties that are edited to match local build environment-->
    <property file="build.properties"/>
    <property name="bluej_home" value="${basedir}" />

    <!-- 
     This is the only place you need to change the version number.
     After changing the version number the target "update-version-number" should be run -->
    <property name="bluej.version.major" value="2" />
    <property name="bluej.version.minor" value="5" />
    <property name="bluej.version.release" value="0" />
    <property name="bluej.version.suffix" value="" />
    <property name="bluej.version" value="${bluej.version.major}.${bluej.version.minor}.${bluej.version.release}${bluej.version.suffix}" />

    <!-- user specific properties that are edited to match local build environment-->
    <property file="build.properties"/>

    <!-- Set up common directories -->
    <property name="core.doc" value="doc/all"/>
    <property name="extension.doc" value="doc/extensions"/>

    <property name="core.src" value="src"/>
    <property name="core.build" value="classes"/>
    <property name="boot.src" value="boot/src"/>
    <property name="boot.build" value="boot/classes"/>
    <property name="test.src" value="test/src"/>
    <property name="test.build" value="test/classes"/>
    <property name="test.report" value="test/report"/>

    <property name="extensions.lib"  location="${bluej_home}/lib/extensions"/>

    <property name="boot.jar" value="${bluej_home}/lib/bluej.jar"/>
    <property name="core.jar" value="${bluej_home}/lib/bluejcore.jar"/>
    <property name="editor.jar" value="${bluej_home}/lib/bluejeditor.jar"/>
    <property name="extension.jar" value="${bluej_home}/lib/bluejext.jar"/>

    <!-- Set up classpath (does not include jar files built by us) -->
    <path id="bluej.class.path">
        <pathelement location="${bluej_home}/lib/MRJ141Stubs.jar"/>
        <pathelement location="${bluej_home}/lib/antlr.jar"/>
        <pathelement location="${bluej_home}/lib/junit.jar"/>
        <pathelement location="${bluej_home}/lib/org-netbeans-lib-cvsclient.jar"/>
        <pathelement location="${bluej_home}/lib/jsch.jar"/>
        <pathelement location="${bluej_home}/lib/sshconnection.jar"/>
        <pathelement location="${bluej_home}/lib/svnkit-javahl.jar"/>
    </path>
    
    <!-- If you change the first or last lines of this license you might want
     to update the 'add-license-to-sources' target as well -->    
    <property name="license" value="/*${line.separator}
This file is part of the BlueJ program. ${line.separator}
Copyright (C) 1999-2009  Michael KÃ¶lling and John Rosenberg ${line.separator}
${line.separator}
This program is free software; you can redistribute it and/or ${line.separator}
modify it under the terms of the GNU General Public License ${line.separator}
as published by the Free Software Foundation; either version 2 ${line.separator}
of the License, or (at your option) any later version. ${line.separator}
${line.separator}
This program is distributed in the hope that it will be useful, ${line.separator}
but WITHOUT ANY WARRANTY; without even the implied warranty of ${line.separator}
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ${line.separator}
GNU General Public License for more details. ${line.separator}
${line.separator}
You should have received a copy of the GNU General Public License ${line.separator}
along with this program; if not, write to the Free Software ${line.separator}
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. ${line.separator}
${line.separator}
This file is subject to the Classpath exception as provided in the  ${line.separator}
LICENSE.txt file that accompanied this code.${line.separator}
*/${line.separator}"/>

    <!-- taskdef name="jarbundler"
        classname="com.loomcom.ant.tasks.jarbundler.JarBundler" / -->

    <!--
      -  Generate the parser Java code - not a dependency of any other
      -  target. Must be explicitly specified on ant command line
     -->
    <target name="parser">
        <antlr target="${core.src}/bluej/parser/ast/java.g"
               outputdirectory="${core.src}/bluej/parser/ast/gen"/>
        <antlr target="${core.src}/bluej/parser/ast/unittest.tree.g"
               outputdirectory="${core.src}/bluej/parser/ast/gen"/>
    </target>

    <!--
      -  Compile the boot strap loader
     -->
    <target name="compile-boot">
        <mkdir dir="${boot.build}"/>
        <!-- Compile the java code from ${boot.src} into ${boot.build} -->
        <!-- Boot should not need any other jars or classes other than standard JDK -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                srcdir="${boot.src}"
                destdir="${boot.build}"
                source="1.5"
                target="1.5"
                deprecation="yes"
        >
        </javac>

    </target>

    <!--
      -  Compile the core classes (includes extension and editor classes)
     -->
    <target name="compile-core">
        <mkdir dir="${core.build}"/>
        <!-- Compile the java code from ${core.src} into ${core.build} -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                source="1.5"
                target="1.5"
                srcdir="${core.src}"
                destdir="${core.build}"
                debug="on"
                deprecation="yes"
                excludes="de/**,

                    archiver/**, gnu/**, javax/**, kopi/**,
                    net/**/test/**,
                    net/**,
                    bluej/tester/**,
                    bluej/browser/**,
                    bluej/guibuilder/**,
                    bluej/editor/moe/Moe.java">

            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-test" depends="compile-boot, compile-core">
        <mkdir dir="${test.build}"/>
        <mkdir dir="${test.report}"/>
        <!-- Compile the java code from ${test.src} into ${test.build} -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                srcdir="${test.src}"
                source="1.5"
                target="1.5"
                destdir="${test.build}"
                deprecation="yes"
                >
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.build}"/>
                <pathelement location="${core.build}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="jar-boot" depends="compile-boot">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${boot.jar}"/>
        <!-- this is the Boot, the resulting jar is bluej.jar for historic reasons -->
        <jar compress="yes" jarfile="${boot.jar}">
            <fileset dir="${boot.build}">
                <include name="bluej/Boot*.class"/>
                <include name="bluej/Splash*.class"/>
                <include name="bluej/BlueJLabel.class"/>
                <include name="bluej/GreenfootLabel.class"/>
            </fileset>
            <fileset dir="${boot.src}">
                <include name="bluej/splash.jpg"/>
                <include name="bluej/greenfootsplash.jpg"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="bluej.Boot"/>
            </manifest>
        </jar>
    </target>

    <target name="jar-core" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${core.jar}"/>
        <jar compress="yes" jarfile="${core.jar}">
            <fileset dir="${core.build}">
                <exclude name="bluej/extensions/**" />
                <exclude name="bluej/editor/**" />
                <exclude name="org/**" />
            </fileset>
        </jar>
    </target>

    <target name="jar-editor" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${editor.jar}"/>
        <jar compress="yes" jarfile="${editor.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/editor/**" />
                <include name="org/**" />
                <exclude name="bluej/editor/*.txt" />
                <exclude name="bluej/editor/*.xml" />
            </fileset>
        </jar>
    </target>

    <target name="jar-extension" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${extension.jar}"/>
        <jar compress="yes" jarfile="${extension.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/extensions/**" />
            </fileset>
        </jar>
    </target>

    <target name="ready-to-run" depends="jar-core, jar-editor, jar-extension">
    </target>

    <target name="run">
        <!-- delete the greenfoot jar (if it exists) since it screws up BlueJ -->
        <delete quiet="true" file="${extensions.lib}/greenfoot.jar"/>
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${run_java_home}/bin/java">
            <classpath>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
            </classpath>
        </java>
    </target>

    <target name="run-profiler">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
            </classpath>
        </nbprofiledirect>

        <!-- delete the greenfoot jar (if it exists) since it screws up BlueJ -->
        <delete quiet="true" file="${extensions.lib}/greenfoot.jar"/>
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${run_java_home}/bin/java">
            <classpath>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
            </classpath>
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
        </java>
    </target>

    <target name="editor-dist">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="dist"/>
    </target>

    <target name="dist" depends="ready-to-run">
        <echo message="Do you have the latest copy of the submitter extension in your lib/extensions directory??"/>
        <ant dir="package" target="dist"/>
        <!-- ant dir="package" target="windows-dist"/-->
    </target>

    <target name="dist-greenfoot" depends="ready-to-run">
        <ant dir="package" antfile="greenfoot-build.xml" target="dist"/>
    </target>

    <target name="windows-dist">
        <ant dir="package" target="windows-dist"/>
    </target>

    <target name="mac-dist">
        <jarbundler dir="package"
            name="BlueJ"
            mainclass="bluej.Boot"
            jvmversion="1.4+"
            icon="lib/images/bluej.icns"
            version="${bluej.version}">
            <jarfileset dir="lib">
                <include name="**/*.jar" />
                <exclude name="*/CVS" />
            </jarfileset>
        </jarbundler>

    </target>

    <target name="test" depends="compile-core, compile-test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${core.jar}"/>
                <pathelement location="${extension.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="${test.build}"/>
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="yes" todir="${test.report}">
                <fileset dir="${test.src}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="doc-core">
        <!-- doc the java code from ${core.src} into ${core.doc} -->
        <mkdir dir="${core.doc}"/>
        <javadoc destdir="${core.doc}"
            packagenames="bluej.*, org.syntax.jedit.*"
            excludepackagenames=
               "bluej.guibuilder.*,
                bluej.groupwork.*,
                bluej.browser.*"
            sourcepath="${core.src}"
            Windowtitle="BlueJ API"
            Doctitle="BlueJ API"
            bottom="&lt;a href=//www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="doc-extension">
        <mkdir dir="${extension.doc}"/>
        <javadoc destdir="${extension.doc}"
            packagenames="bluej.extensions.event"
            sourcepath="${core.src}"

            Windowtitle="BlueJ Extensions API"
            Doctitle="BlueJ Extensions API"
            bottom="&lt;a href=http://www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">

            <fileset dir="src" defaultexcludes="yes">
                <include name="bluej/extensions/*.java" />
                <exclude name="bluej/extensions/ExtensionBridge.java"/>
                <include name="bluej/extensions/editor/*.java"/>
                <exclude name="bluej/extensions/editor/EditorBridge.java"/>
            </fileset>
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="update-version-number" description="updates the version number in all files where it appears" >
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_MAJOR = .*"/>
            <substitution expression="BLUEJ_VERSION_MAJOR = ${bluej.version.major};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_MINOR = .*"/>
            <substitution expression="BLUEJ_VERSION_MINOR = ${bluej.version.minor};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_RELEASE = .*"/>
            <substitution expression="BLUEJ_VERSION_RELEASE = ${bluej.version.release};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_SUFFIX = .*"/>
            <substitution expression="BLUEJ_VERSION_SUFFIX = &quot;${bluej.version.suffix}&quot;;"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
    </target>
    
    <target name="add-license-to-sources" description="adds the license to each source file" >	      
	    <replaceregexp flags="s">
	        <regexp pattern="(^\/\*\n This file is part of the BlueJ program.*? file that accompanied this code\.\n.\*\/\n)|^"/> 
	        <substitution expression="${license}"/> 
	        <fileset dir="." includes="**/*.java" >
	        	<exclude name="package/Installer.java"/>
	        	<exclude name="examples/**"/>
	        	<exclude name="src/org/syntax/jedit/**"/>
	        </fileset>
	    </replaceregexp>
    </target>        
        
    <target name="clean-boot">
        <delete quiet="true" dir="${boot.build}"/>
        <delete quiet="true" file="${boot.jar}"/>
    </target>

    <target name="clean-greenfoot" description="clean up greenfoot related stuff" >
        <!-- Installer image windows: greenfoot-install.bmp -->
        <delete file="package/greenfoot-install.bmp" />
        <!-- Installer image jar: greenfoot-install.png -->
        <delete file="package/greenfoot-install.png" />
        <delete file="boot/src/bluej/greenfootsplash.jpg" />
        <delete dir="lib/greenfoot" />
        <delete dir="package/scenarios" />
        <delete>
            <fileset file="lib/extensions/greenfoot.jar"/>
        </delete>
        
        <delete includeEmptyDirs="true">
            <fileset dir="lib">
                <include name="*/greenfoot/" />
            </fileset>
        </delete>
    </target>

    <target name="clean-core">
        <delete quiet="true" dir="${core.build}" />
        <delete quiet="true" file="${core.jar}" />
        <delete quiet="true" file="${editor.jar}" />
        <delete quiet="true" file="${extension.jar}" />

    </target>

    <target name="clean" depends="clean-boot, clean-core, clean-greenfoot">
        <ant dir="package" target="clean"/>
    </target>

    <target name="editor-clean">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="clean"/>
    </target>
</project>
