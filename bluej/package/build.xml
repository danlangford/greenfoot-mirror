<?xml version="1.0" encoding="UTF-8"?>
<project name="bluej-package" default="dist">
    
    <!-- Names of the the distributables created by the dist-target -->
    <property name="dist.jarinstaller" value="BlueJ-generic-${bluej.version.nodots}.jar"/>
    <property name="dist.mac.legacy" value="BlueJ-mac-legacy-${bluej.version.nodots}.zip"/>
    <property name="dist.mac" value="BlueJ-mac-${bluej.version.nodots}.zip"/>
    
    <!-- Don't know how to pass this to the Windows builder -->
    <property name="dist.win" value="BlueJ-windows-${bluej.version.nodots}"/>
    <property name="dist.jar" value="bluej-dist.jar"/>        
    
    <property name="bluej.source.zip" value="BlueJ-source-${bluej.version.nodots}.zip"/>
    
	<!-- Library files to be installed as part of BlueJ -->
    <patternset id="bluej.libfiles">
        <exclude name="**/.#*" />
        <include name="lib/bluej.jar" />
        <include name="lib/bluejcore.jar" />
        <include name="lib/bluejeditor.jar" />
        <include name="lib/bluejext.jar" />
        <include name="lib/junit-4.8.2.jar" />
        <include name="lib/AppleJavaExtensions.jar" />
        <include name="lib/sshconnection.jar" />
        <include name="lib/org-netbeans-lib-cvsclient.jar" />
        <include name="lib/jsch.jar" />
        <include name="lib/svnkit.jar" />
        <include name="lib/svnkit-javahl.jar" />
        <include name="lib/trilead.jar" />
    	<include name="lib/httpclient-4.1.1.jar" />
    	<include name="lib/httpcore-4.1.jar" />
    	<include name="lib/httpmime-4.1.1.jar" />
    	<include name="lib/commons-logging-api-1.1.2.jar" />
    	<include name="lib/diffutils-1.2.1.jar" />
    	<include name="lib/bjdoclet.jar" />
        <include name="lib/bluej.defs" />
        <include name="lib/moe.defs" />
        <include name="lib/userlib/README.TXT" />
        <include name="lib/windowtofront.js" />
    </patternset>

    <patternset id="bluej.libdirs">
        <exclude name="**/.#*" />
        <include name="lib/images/*.gif" />
        <include name="lib/images/*.png" />
        <include name="lib/images/*.jpg" />
        <include name="lib/images/*.icns" />
        <include name="lib/afrikaans/" />
    	<include name="lib/catalan/" />
        <include name="lib/chinese/" />
        <include name="lib/czech/" />
        <include name="lib/danish/" />
        <include name="lib/dutch/" />
        <include name="lib/english/" />
        <include name="lib/french/" />
        <include name="lib/german/" />
        <include name="lib/greek/" />
        <include name="lib/italian/" />
        <include name="lib/japanese/" />
        <include name="lib/korean/" />
        <include name="lib/portuguese/" />
        <include name="lib/russian/" />
        <include name="lib/slovak/" />
        <include name="lib/spanish/" />
        <include name="lib/swedish/" />
        <include name="lib/extensions/" />
    	<exclude name="lib/*/greenfoot-labels" />
    	<exclude name="lib/*/greenfootAPI" />
    </patternset>

    <patternset id="bluej.examples">
        <exclude name="**/*.pkh" />
        <exclude name="**/.#*" />
        <include name="examples/appletdemo/" />
        <include name="examples/debugdemo/" />
        <include name="examples/hello/" />
        <include name="examples/people/" />
        <include name="examples/people2/" />
        <include name="examples/picture/" />
        <include name="examples/file-reader/" />
        <include name="examples/shapes/" />
    </patternset>
    
    <patternset id="bluej.icons">
        <include name="icons/*" />
    </patternset>

    <patternset id="bluej.examples.classes">
        <include name="examples/people/*.class" />
    </patternset>

    <fileset id="bluej.license.files" dir="${bluej_home}/doc/">
        <include name="LICENSE.txt" />
        <include name="THIRDPARTYLICENSE.txt" />
    </fileset>

    <!-- These are files which should be made to have system line endings -->
    <patternset id="bluej.textfiles.utf8">
        <include name="examples/**/*.java" />
        <include name="examples/**/README.*" />
        <include name="lib/bluej.defs" />
        <include name="lib/moe.defs" />
        <include name="lib/*/templates/**" />
    	<include name="doc/*.txt" />
    	<include name="doc/*.TXT" />
    	<include name="doc/HOWTO.*" />
    </patternset>
	<patternset id="bluej.textfiles.iso88591">
        <include name="lib/*/labels" />
        <include name="lib/*/dialogues" />
        <include name="lib/*/*.help" />
	</patternset>
	
	<!-- Builds the bluej-dist.jar file -->
	<target name="pre-dist">
        <delete dir="install_tmp" />
        <mkdir dir="install_tmp"/>

        <!-- construct the directory structure we want for the distribution -->
        <copy todir="install_tmp">
            <fileset dir="${bluej_home}" >
                <patternset refid="bluej.libfiles"/>
                <patternset refid="bluej.libdirs"/>
                <patternset refid="bluej.examples"/>
                <patternset refid="bluej.icons" />
            </fileset>
            <fileset refid="bluej.license.files"/>
        	<fileset dir="${bluej_home}/doc">
				<include name="README.TXT"/>        	
        	</fileset>
        </copy>

        <!-- make sure the people .class files are dated in the future so they
             will appear to be compiled -->
         <tstamp>
            <format property="touch.time" pattern="MM/dd/yyyy hh:mm aa" offset="5" unit="year"/>
        </tstamp>

        <touch datetime="${touch.time}">
            <fileset dir="install_tmp" >
                <patternset refid="bluej.examples.classes"/>
            </fileset>
        </touch>

        <!-- make sure line endings are in unix format -->
        <fixcrlf srcdir="install_tmp" eol="lf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="install_tmp" eol="lf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>
        
        <chmod dir="install_tmp" perm="a+r"/>
        <!-- jar the entire distribution into one jar file            -->
        <!-- (use zip instead of jar to avoid generation of manifest) -->
        <zip zipfile="${dist.jar}"
             basedir="install_tmp"
             compress="yes"
        />
		
        <delete dir="install_tmp" />
	</target>
    
    <target name="dist">
    	<antcall target="pre-dist" />
        
        <mkdir dir="install_tmp"/>

        <!-- Build the program which calculates the length of the  -->
        <!-- distribution jar, and stores its length in the        -->
        <!-- installer properties                                  -->
        <javac
               executable="${build_java_home}/${java_command_dir_name}/javac"
               fork="yes"
               srcdir="."
               destdir="install_tmp"
               includes="InstallerProps.java"
               debug="true"
        />

        <!-- Now run it -->
        <java
               classname="InstallerProps"
               fork="yes"
               jvm="${build_java_home}/${java_command_dir_name}/java"
            >
            <classpath>
                 <pathelement location="install_tmp" />
            </classpath>
            <arg line="installer.props"/>
        </java>

        <!-- And delete it as it's no longer needed   -->
        <delete file="install_tmp/InstallerProps.class"/>
        
        <!-- Copy other files needed by the installer -->
        <copy todir="install_tmp" file="${dist.jar}"/>
        <copy todir="install_tmp" file="installer-logo.gif"/>

        <!-- compile the installer -->
        <javac
               executable="${build_java_home}/${java_command_dir_name}/javac"
               fork="yes"
               srcdir="."
               destdir="install_tmp"
               includes="Installer.java"
               debug="true"
        >
        	<compilerarg line="-source 1.3"/>
    		<compilerarg line="-target 1.3"/>
    	</javac>

        <!-- bundle the resulting class into the final distribution jar file -->
        <jar jarfile="${dist.jarinstaller}"
             basedir="install_tmp"
             compress="no"
             manifest="manifest"
        />

        <!-- create the source zip -->
        <antcall target="zip-source"/>
        <!-- cleanup
             leaves bluej-dist.jar for distribution to whoever is
             building the windows installer. Mac and generic installers
             are now created. -->
        <delete dir="install_tmp"/>
       
        <echo level="info" message="----------------------------------------------------------------------------"/>
        <echo level="info" message="The bluej-dist.jar (for building the windows installer) is in: ${basedir}${file.separator}${dist.jar}"/>
        <echo level="info" message="The generic installer is in: ${basedir}${file.separator}${dist.jarinstaller}"/>
        <echo level="info" message="The source is in: ${basedir}${file.separator}${bluej.source.zip}"/>
        <echo level="warning" message="Remember to remove the dots in the version numbers when moving the files to the server. "/>
    </target>


    <target name="mac-dist" depends="pre-dist">
        <delete dir="mac_tmp" />
        
        <!-- Create the directory which will be the top level directory when unzipped-->
        <property name="zip_dir" location="mac_tmp/BlueJ ${bluej.version}/" />
        <mkdir dir="${zip_dir}" />
        
        <!-- Files in this list will get the executable attribute set -->
        <property name="executable_files" value="**/PkgInfo,**/JavaApplicationStub" />

        <!-- copy the skeleton mac dir -->
        <copy todir="${zip_dir}/BlueJ-legacy.app">
            <fileset dir="macfiles/BlueJ-legacy.app"/> 
        </copy>
        
        <!-- update version number -->
        <replaceregexp byline="true">
            <regexp pattern="VERSION" />
            <substitution expression="${bluej.version}" />
            <fileset dir="${zip_dir}/BlueJ-legacy.app/Contents" includes="Info.plist" />
        </replaceregexp>
        
        <copy todir="${zip_dir}">
            <fileset dir="${bluej_home}">
                <patternset refid="bluej.libfiles" />
                <patternset refid="bluej.libdirs" />
                <patternset refid="bluej.examples" />
            </fileset>
        </copy>
        
        <!-- The lib dir should not be in the root dir, so we move the contents to the proper mac-location -->
        <move todir="${zip_dir}/BlueJ-legacy.app/Contents/Resources/Java">
            <fileset dir="${zip_dir}/lib/" />
        </move>
        <delete dir="${zip_dir}/BlueJ-legacy.app/Contents/Resources/Java/lib" />

        <!-- ZIP it -->
        <zip destfile="${dist.mac.legacy}" duplicate="fail">
            <zipfileset dir="mac_tmp" excludes="${executable_files}" />
            <!-- Make the files executable that need to be executable -->
            <zipfileset dir="mac_tmp" filemode="755" includes="${executable_files}" />
        </zip>
    	
        <!-- copy the skeleton mac dir -->
        <copy todir="${zip_dir}/BlueJ.app">
            <fileset dir="macfiles/BlueJ.app"/> 
        </copy>
    	<copy todir="${zip_dir}/BlueJ.app/Contents/MacOS" file="macfiles/nativelauncher/JavaAppLauncher" />
    	
        <!-- update version number -->
        <replaceregexp byline="true">
            <regexp pattern="VERSION" />
            <substitution expression="${bluej.version}" />
            <fileset dir="${zip_dir}/BlueJ.app/Contents" includes="Info.plist" />
        </replaceregexp>
    	
    	<!-- Move contents from legacy app to new app -->
        <move file="${zip_dir}/BlueJ-legacy.app/Contents/Resources/Java"
        	todir="${zip_dir}/BlueJ.app/Contents/Resources" />
    	
    	<!-- Copy the JDK to the app -->
    	<copy  todir="${zip_dir}/BlueJ.app/Contents/Frameworks/jdk.framework/Versions/A">
    		<fileset dir="${mac_bundled_jdk_path}" />
    	</copy>
    	
	    <!-- symlink the info.properties file -->
    	<symlink link="${zip_dir}/BlueJ.app/Contents/Frameworks/jdk.framework/Resources/Info.plist"
    		resource="../Versions/A/Contents/Info.plist" />
    	
    	<!-- Remove the legacy app -->
    	<delete dir="${zip_dir}/BlueJ-legacy.app" />

        <property name="executable_files2" value="**/PkgInfo,**/JavaAppLauncher,**/Contents/Frameworks/jdk.framework/Versions/A/Contents/**/bin/*" />

        <!-- ZIP it -->
        <zip destfile="${dist.mac}" duplicate="fail">
            <zipfileset dir="mac_tmp" excludes="${executable_files2}" />
            <!-- Make the files executable that need to be executable -->
            <zipfileset dir="mac_tmp" filemode="755" includes="${executable_files2}" />
        </zip>
    	
        <delete dir="mac_tmp" />

        <echo level="info" message="----------------------------------------------------------------------------"/>
        <echo level="info" message="The mac installer is in: ${basedir}${file.separator}${dist.mac}"/>    	
        <echo level="info" message="The legacy mac installer is in: ${basedir}${file.separator}${dist.mac.legacy}"/>
    
    </target>
	
	<target name="windows-msi-dist" depends="dist">
		<delete dir="winsetup/SourceDir" />
		<delete dir="winsetup" includes="*.wixobj" />
		<unzip src="${dist.jar}" dest="winsetup/SourceDir" />

        <!-- make sure line endings are in windows format -->
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>
		
		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="CheckboxExtrasDlg.wxs"/>
		</exec>
			
		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="ui.wxs"/>
		</exec>
			
		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="bluej.wxs"/>
		</exec>
			
		<!-- The heat tool scans all the files in SourceDir and generates
		     a WiX file that has all the XML needed for installing all those files -->
		<exec dir="winsetup" executable="${wix_bin}/heat.exe">
			<arg line="dir SourceDir -cg BlueJFiles -dr INSTALLDIR -ke -gg -srd -sfrag -template fragment -out bluej-install-files.wxs"/>
		</exec>
		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="bluej-install-files.wxs"/>
		</exec>
			
		<exec dir="winsetup" executable="${wix_bin}/light.exe">
			<arg line="-ext WixUIExtension -loc bluej.wxl bluej.wixobj CheckboxExtrasDlg.wixobj ui.wixobj bluej-install-files.wixobj -o bluej-${bluej.version}.msi"/>
		</exec>
		<delete dir="winsetup/SourceDir" />
	</target>

	<target name="windows-msi-bundled-dist" depends="dist">
		<delete dir="winsetup/SourceDir" />
		<delete dir="winsetup" includes="*.wixobj" />
		<unzip src="${dist.jar}" dest="winsetup/SourceDir" />

        <!-- make sure line endings are in windows format -->
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>
		
		<!-- Fix the path to the JDK in bluej.defs -->
        <replaceregexp byline="true">
            <regexp pattern="#bluej\.windows\.vm=.*"/>
            <substitution expression="bluej.windows.vm=jdk"/>
            <fileset dir="winsetup/SourceDir/lib" includes="bluej.defs"/>
        </replaceregexp>

		<!-- Copy the JDK to be bundled -->
		<copy todir="winsetup/SourceDir/jdk">
			<fileset dir="${win_bundled_jdk_path}" />
		</copy>
		
		<!-- The heat tool scans all the files in SourceDir and generates
		     a WiX file that has all the XML needed for installing all those files -->
		<exec dir="winsetup" executable="${wix_bin}/heat.exe">
			<arg line="dir SourceDir -cg BlueJFiles -dr INSTALLDIR -ke -gg -srd -sfrag -sreg -scom template fragment -out bluej-install-files.wxs"/>
		</exec>

		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="CheckboxExtrasDlg.wxs"/>
		</exec>
			
		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="ui.wxs"/>
		</exec>
			
		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="bluej.wxs"/>
		</exec>
			
		<exec dir="winsetup" executable="${wix_bin}/candle.exe">
			<arg line="bluej-install-files.wxs"/>
		</exec>
			
		<exec dir="winsetup" executable="${wix_bin}/light.exe">
			<arg line="-ext WixUIExtension -loc bluej.wxl bluej.wixobj CheckboxExtrasDlg.wixobj ui.wixobj bluej-install-files.wixobj -o bluej-${bluej.version}-bundled.msi"/>
		</exec>
		<delete dir="winsetup/SourceDir" />
	</target>
		
	<target name="debian-dist">
		<mkdir dir="bluejdeb" />
		<copy todir="bluejdeb">
			<fileset dir="debianfiles" includes="DEBIAN/**" />
		</copy>
		
		<mkdir dir="bluejdeb/usr" />
		<mkdir dir="bluejdeb/usr/bin" />
		<copy todir="bluejdeb/usr/bin" file="debianfiles/bluej" />
		<chmod perm="ugo+x" file="bluejdeb/usr/bin/bluej" verbose="true" />
		
		<!-- lib files -->
		<mkdir dir="bluejdeb/usr/share/bluej" />
		<mkdir dir="bluejdeb-lib-tmp" />
        <copy todir="bluejdeb-lib-tmp">
            <fileset dir="${bluej_home}">
            	<patternset refid="bluej.libdirs" />
            	<patternset refid="bluej.libfiles" />
            </fileset>
        </copy>
		<move todir="bluejdeb/usr/share/bluej">
			<fileset dir="bluejdeb-lib-tmp/lib">
				<patternset includes="**" />
			</fileset>
		</move>
		<delete dir="bluejdeb-lib-tmp" />
		
		<!-- examples and documentation -->
		<mkdir dir="bluej-examples-tmp" />
        <copy todir="bluej-examples-tmp">
            <fileset dir="${bluej_home}">
                <patternset refid="bluej.examples" />
            </fileset>
        </copy>
		<mkdir dir="bluejdeb/usr/share/doc/BlueJ" />
        <move todir="bluejdeb/usr/share/doc/BlueJ">
            <fileset dir="bluej-examples-tmp/examples">
                <patternset includes="**" />
            </fileset>
        </move>
		<delete dir="bluej-examples-tmp" />
		<copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/LICENSE.txt" />
		<copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/THIRDPARTYLICENSE.txt" />
		<copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/README.TXT" />

		<!-- desktop app extras -->
		<copy todir="bluejdeb/usr/share">
			<fileset dir="debianfiles">
				<patternset includes="applications/**,icons/**,pixmaps/**" />
			</fileset>
		</copy>

	    <!-- update version number -->
	    <replaceregexp byline="true">
	        <regexp pattern="VERSION" />
	        <substitution expression="${bluej.version.debian}" />
	        <fileset dir="bluejdeb/DEBIAN" includes="control" />
	    </replaceregexp>
		
		<!-- you must do this as root, sigh -->
		<chown owner="root">
			<fileset dir="bluejdeb">
				<patternset includes="**" />
			</fileset>
			<dirset dir="bluejdeb">
				<patternset includes="**" />
			</dirset>			
		</chown>
		<chgrp group="root">
			<fileset dir="bluejdeb">
				<patternset includes="**" />
			</fileset>
			<dirset dir="bluejdeb">
				<patternset includes="**" />
			</dirset>			
		</chgrp>
		
		<chmod perm="755" file="bluejdeb/DEBIAN/postinst" />
		<chmod perm="755" file="bluejdeb/DEBIAN/postrm" />
		<exec executable="dpkg-deb" searchpath="true">
			<arg value="-b" />
			<arg file="bluejdeb" />
			<arg value="bluej-${bluej.version}.deb" />
		</exec>
		
		<delete dir="bluejdeb" />
	</target>
        
    <!-- windows-dist requires that a bluej-dist.jar file is placed into
         the package directory. This is unjarred and then rebuilt into
         the windows installer package (left as winsetup/bluejsetup.exe)-->
    <target name="windows-dist">
        <delete dir="install_tmp" />
        <unzip src="${dist.jar}" dest="install_tmp" />

        <!-- make sure line endings are in windows format -->
        <fixcrlf srcdir="install_tmp" eol="crlf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="install_tmp" eol="crlf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>
        
        <!-- update version number in innosetup config file -->
        <replaceregexp byline="true">
            <regexp pattern="AppVerName=.*" />
            <substitution expression="AppVerName=BlueJ ${bluej.version}" />
            <fileset dir="winsetup" includes="bluej.iss" />
        </replaceregexp>
        
        <!-- update output file in innosetup config file -->
        <replaceregexp byline="true">
            <regexp pattern="OutputBaseFilename=.*" />
            <substitution expression="OutputBaseFilename=${dist.win}" />
            <fileset dir="winsetup" includes="bluej.iss" />
        </replaceregexp>
        
        <exec dir="winsetup" executable="C:\Program Files\Inno Setup 5\ISCC.exe">
            <arg line="bluej.iss"/>
        </exec>

        <delete dir="install_tmp" />
    </target>
    
    <target name="zip-source"  description="create a zip of all the sources and other resources needed to build BlueJ." >
        <zip destfile="${bluej.source.zip}" compress="yes">
            <zipfileset dir="${bluej_home}" defaultexcludes="yes">
	            <include name="src/**/*.java" />       
	            <include name="boot/src/**/*.java" />       
	            <include name="boot/src/bluej/splash.jpg" />
            	<include name="bjdoclet/**" />
	            <include name="doc/HOWTO.*" />    
	            <include name="doc/THIRDPARTYLICENSE.txt" />
	            <include name="doc/LICENSE.txt" />
            	<include name="doc/README.TXT" />
                <include name="doc/BlueJ-architecture-and-design.txt" />
            	<include name="doc/BlueJ-parser.txt" />
            	<include name="doc/threading-issues.txt" />
	            <include name="examples/**/*" />          
	            <include name="icons/**/*" />           
	            <include name="lib/**/*" />
            	
            	<!-- exclude Greenfoot files -->
	            <exclude name="lib/commons-httpclient-*"/>
	            <exclude name="lib/commons-codec-*"/>
	            <exclude name="lib/jl*"/>
	            <exclude name="lib/bluej.jar"/>
	            <exclude name="lib/bluejcore.jar"/>
	            <exclude name="lib/bluejeditor.jar"/>
		        <exclude name="lib/bluejext.jar"/>
		        <exclude name="lib/extensions/greenfoot.jar"/>
		        <exclude name="lib/greenfoot/"/>
            	
	            <include name="package/**/*" />     
	            <exclude name="package/commons-*"/>
	            <exclude name="package/${bluej.source.zip}"/>
	            <exclude name="package/BlueJ*.jar"/>
	            <exclude name="package/BlueJ*.zip"/>
            	<exclude name="package/bluej*.deb"/>
	            <exclude name="package/bluej-dist.jar"/>
	            <exclude name="package/install_tmp/"/>
	            <include name="test/**/*"/>
            	<exclude name="test/classes/**"/>
	            <include name="build.properties"/>   
	            <include name="build.xml"/>  
	            <exclude name="**/.*"/>
	        </zipfileset>
        </zip>
    </target>
    
    <target name="clean">
        <delete>
            <fileset dir="." includes="BlueJ-generic-*.jar"/>
            <fileset dir="." includes="BlueJ-mac-*.zip"/>
            <fileset dir="." includes="BlueJ-source-*.zip"/>
        </delete>
        <delete file="${dist.jar}"/>       
        <delete file="winsetup/$(dist.win}.exe" />
        <delete dir="install_tmp" />
    </target>

</project>
